<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="9" passed="9" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-09-06T15:47:17 IST" name="Suite" finished-at="2025-09-06T15:47:37 IST" duration-ms="19822">
    <groups>
      <group name="regression">
        <method signature="DemoPage.validLogin_standardUser()[pri:1, instance:tests.DemoPage@652a7737]" name="validLogin_standardUser" class="tests.DemoPage"/>
        <method signature="DemoPage.invalidLogin_wrongPassword()[pri:2, instance:tests.DemoPage@652a7737]" name="invalidLogin_wrongPassword" class="tests.DemoPage"/>
        <method signature="DemoPage.invalidLogin_wrongUsername()[pri:3, instance:tests.DemoPage@652a7737]" name="invalidLogin_wrongUsername" class="tests.DemoPage"/>
        <method signature="DemoPage.invalidLogin_blankFields()[pri:4, instance:tests.DemoPage@652a7737]" name="invalidLogin_blankFields" class="tests.DemoPage"/>
        <method signature="DemoPage.lockedOutUserLogin()[pri:5, instance:tests.DemoPage@652a7737]" name="lockedOutUserLogin" class="tests.DemoPage"/>
        <method signature="DemoPage.login_withSpacesInUsername()[pri:6, instance:tests.DemoPage@652a7737]" name="login_withSpacesInUsername" class="tests.DemoPage"/>
        <method signature="DemoPage.login_withCaseSensitiveUsername()[pri:7, instance:tests.DemoPage@652a7737]" name="login_withCaseSensitiveUsername" class="tests.DemoPage"/>
        <method signature="DemoPage.login_withSQLInjectionString()[pri:8, instance:tests.DemoPage@652a7737]" name="login_withSQLInjectionString" class="tests.DemoPage"/>
        <method signature="DemoPage.login_withLongUsername()[pri:9, instance:tests.DemoPage@652a7737]" name="login_withLongUsername" class="tests.DemoPage"/>
      </group> <!-- regression -->
      <group name="smoke">
        <method signature="DemoPage.validLogin_standardUser()[pri:1, instance:tests.DemoPage@652a7737]" name="validLogin_standardUser" class="tests.DemoPage"/>
      </group> <!-- smoke -->
      <group name="sanity">
        <method signature="DemoPage.validLogin_standardUser()[pri:1, instance:tests.DemoPage@652a7737]" name="validLogin_standardUser" class="tests.DemoPage"/>
        <method signature="DemoPage.invalidLogin_blankFields()[pri:4, instance:tests.DemoPage@652a7737]" name="invalidLogin_blankFields" class="tests.DemoPage"/>
      </group> <!-- sanity -->
    </groups>
    <test started-at="2025-09-06T15:47:17 IST" name="Confirmation Tests" finished-at="2025-09-06T15:47:37 IST" duration-ms="19822">
      <class name="tests.DemoPage">
        <test-method is-config="true" signature="setUp(java.lang.String)[pri:0, instance:tests.DemoPage@652a7737]" started-at="2025-09-06T15:47:17 IST" name="setUp" finished-at="2025-09-06T15:47:22 IST" duration-ms="4917" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="navigateToUrl(java.lang.String)[pri:0, instance:tests.DemoPage@652a7737]" started-at="2025-09-06T15:47:22 IST" name="navigateToUrl" finished-at="2025-09-06T15:47:24 IST" depends-on-methods="base.BaseTest.setUp" duration-ms="1816" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[https://www.saucedemo.com/]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- navigateToUrl -->
        <test-method signature="validLogin_standardUser()[pri:1, instance:tests.DemoPage@652a7737]" started-at="2025-09-06T15:47:24 IST" name="validLogin_standardUser" description="Verify that a valid standard user can log in successfully." finished-at="2025-09-06T15:47:26 IST" duration-ms="1708" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validLogin_standardUser -->
        <test-method is-config="true" signature="captureFailure(org.testng.ITestResult)[pri:0, instance:tests.DemoPage@652a7737]" started-at="2025-09-06T15:47:26 IST" name="captureFailure" finished-at="2025-09-06T15:47:26 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=validLogin_standardUser status=SUCCESS method=DemoPage.validLogin_standardUser()[pri:1, instance:tests.DemoPage@652a7737] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureFailure -->
        <test-method signature="invalidLogin_wrongPassword()[pri:2, instance:tests.DemoPage@652a7737]" started-at="2025-09-06T15:47:26 IST" name="invalidLogin_wrongPassword" description="Verify login fails when using correct username but wrong password." finished-at="2025-09-06T15:47:27 IST" duration-ms="1049" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidLogin_wrongPassword -->
        <test-method is-config="true" signature="captureFailure(org.testng.ITestResult)[pri:0, instance:tests.DemoPage@652a7737]" started-at="2025-09-06T15:47:27 IST" name="captureFailure" finished-at="2025-09-06T15:47:27 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=invalidLogin_wrongPassword status=SUCCESS method=DemoPage.invalidLogin_wrongPassword()[pri:2, instance:tests.DemoPage@652a7737] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureFailure -->
        <test-method signature="invalidLogin_wrongUsername()[pri:3, instance:tests.DemoPage@652a7737]" started-at="2025-09-06T15:47:27 IST" name="invalidLogin_wrongUsername" description="Verify login fails when using invalid username with correct password." finished-at="2025-09-06T15:47:28 IST" duration-ms="792" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidLogin_wrongUsername -->
        <test-method is-config="true" signature="captureFailure(org.testng.ITestResult)[pri:0, instance:tests.DemoPage@652a7737]" started-at="2025-09-06T15:47:28 IST" name="captureFailure" finished-at="2025-09-06T15:47:28 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=invalidLogin_wrongUsername status=SUCCESS method=DemoPage.invalidLogin_wrongUsername()[pri:3, instance:tests.DemoPage@652a7737] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureFailure -->
        <test-method signature="invalidLogin_blankFields()[pri:4, instance:tests.DemoPage@652a7737]" started-at="2025-09-06T15:47:28 IST" name="invalidLogin_blankFields" description="Verify login fails when both username and password fields are blank." finished-at="2025-09-06T15:47:28 IST" duration-ms="712" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidLogin_blankFields -->
        <test-method is-config="true" signature="captureFailure(org.testng.ITestResult)[pri:0, instance:tests.DemoPage@652a7737]" started-at="2025-09-06T15:47:28 IST" name="captureFailure" finished-at="2025-09-06T15:47:28 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=invalidLogin_blankFields status=SUCCESS method=DemoPage.invalidLogin_blankFields()[pri:4, instance:tests.DemoPage@652a7737] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureFailure -->
        <test-method signature="lockedOutUserLogin()[pri:5, instance:tests.DemoPage@652a7737]" started-at="2025-09-06T15:47:28 IST" name="lockedOutUserLogin" description="Verify login fails for a locked-out user." finished-at="2025-09-06T15:47:30 IST" duration-ms="1241" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lockedOutUserLogin -->
        <test-method is-config="true" signature="captureFailure(org.testng.ITestResult)[pri:0, instance:tests.DemoPage@652a7737]" started-at="2025-09-06T15:47:30 IST" name="captureFailure" finished-at="2025-09-06T15:47:30 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=lockedOutUserLogin status=SUCCESS method=DemoPage.lockedOutUserLogin()[pri:5, instance:tests.DemoPage@652a7737] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureFailure -->
        <test-method signature="login_withSpacesInUsername()[pri:6, instance:tests.DemoPage@652a7737]" started-at="2025-09-06T15:47:30 IST" name="login_withSpacesInUsername" description="Verify login fails if username contains leading/trailing spaces." finished-at="2025-09-06T15:47:31 IST" duration-ms="906" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login_withSpacesInUsername -->
        <test-method is-config="true" signature="captureFailure(org.testng.ITestResult)[pri:0, instance:tests.DemoPage@652a7737]" started-at="2025-09-06T15:47:31 IST" name="captureFailure" finished-at="2025-09-06T15:47:31 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=login_withSpacesInUsername status=SUCCESS method=DemoPage.login_withSpacesInUsername()[pri:6, instance:tests.DemoPage@652a7737] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureFailure -->
        <test-method signature="login_withCaseSensitiveUsername()[pri:7, instance:tests.DemoPage@652a7737]" started-at="2025-09-06T15:47:31 IST" name="login_withCaseSensitiveUsername" description="Verify login fails if username is entered with wrong case (case-sensitive check)." finished-at="2025-09-06T15:47:31 IST" duration-ms="794" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login_withCaseSensitiveUsername -->
        <test-method is-config="true" signature="captureFailure(org.testng.ITestResult)[pri:0, instance:tests.DemoPage@652a7737]" started-at="2025-09-06T15:47:31 IST" name="captureFailure" finished-at="2025-09-06T15:47:31 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=login_withCaseSensitiveUsername status=SUCCESS method=DemoPage.login_withCaseSensitiveUsername()[pri:7, instance:tests.DemoPage@652a7737] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureFailure -->
        <test-method signature="login_withSQLInjectionString()[pri:8, instance:tests.DemoPage@652a7737]" started-at="2025-09-06T15:47:31 IST" name="login_withSQLInjectionString" description="Verify login fails when SQL injection string is used as username." finished-at="2025-09-06T15:47:32 IST" duration-ms="764" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login_withSQLInjectionString -->
        <test-method is-config="true" signature="captureFailure(org.testng.ITestResult)[pri:0, instance:tests.DemoPage@652a7737]" started-at="2025-09-06T15:47:32 IST" name="captureFailure" finished-at="2025-09-06T15:47:32 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=login_withSQLInjectionString status=SUCCESS method=DemoPage.login_withSQLInjectionString()[pri:8, instance:tests.DemoPage@652a7737] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureFailure -->
        <test-method signature="login_withLongUsername()[pri:9, instance:tests.DemoPage@652a7737]" started-at="2025-09-06T15:47:32 IST" name="login_withLongUsername" description="Verify login fails when username exceeds max length (long string)." finished-at="2025-09-06T15:47:36 IST" duration-ms="4064" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login_withLongUsername -->
        <test-method is-config="true" signature="captureFailure(org.testng.ITestResult)[pri:0, instance:tests.DemoPage@652a7737]" started-at="2025-09-06T15:47:36 IST" name="captureFailure" finished-at="2025-09-06T15:47:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=login_withLongUsername status=SUCCESS method=DemoPage.login_withLongUsername()[pri:9, instance:tests.DemoPage@652a7737] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureFailure -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.DemoPage@652a7737]" started-at="2025-09-06T15:47:36 IST" name="tearDown" finished-at="2025-09-06T15:47:37 IST" duration-ms="757" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.DemoPage -->
    </test> <!-- Confirmation Tests -->
  </suite> <!-- Suite -->
</testng-results>
